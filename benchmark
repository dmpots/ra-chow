#!/bin/env ruby
require 'regression_test'
require 'optparse'
require 'ostruct'
require 'fileutils'

module ChowBenchmark
  TRANSFORMS = {
    "DEAD" => "-d",
    "VALNUM" => "-v",
    "LAZY" => "-z",
    "CPROP" => "-c",
    "COALESCE" => "-s",
    "CLEAN" => "-n",
    "GVAL" => "-g[-p]"
  }
  PRE_PASSES=%w(DEAD VALNUM GVAL LAZY CPROP COALESCE DEAD)
  POST_PASSES=%w(CLEAN)

  RA="/home/compiler/bin/ra"
  CTEST="/home/compiler/bin/ctest"
  CHOW="/home/dmp4866/research/ra-chow/chow-benchmark"

  class Runner
    SEP = "%"
    BM_SEP = "%%"

    def initialize(tmpdir, outfile,ctest_args=nil,chow=CHOW)
      @tmpdir = tmpdir
      @outfile = outfile
      @ctest = CTEST
      @ctest += " "+ctest_args if  ctest_args
      @chow = chow

      @regalloc = {}
      @regalloc[:chow] = chow
      @regalloc[:ra] = RA
    end

    def run(alg, bm)
      @outfile.puts bm.path
      @outfile.puts SEP
      @outfile.puts alg
      @outfile.puts SEP
      @outfile.puts bm.args
      if alg == :chow then
        #call to chow to get detailed paramerter values
        @outfile.puts `#{@chow} #{bm.args} -y`
      end
      @outfile.puts SEP
      @outfile.puts PRE_PASSES.join(" ")
      @outfile.puts SEP
      @outfile.puts POST_PASSES.join(" ")
      @outfile.puts SEP
      #run ctest to gather instruction count
      FileUtils.cd(@tmpdir) do |dir|
        #run ctest here
        prepasses  = PRE_PASSES.map {|p| TRANSFORMS[p]}.join(" ")
        postpasses = POST_PASSES.map {|p| TRANSFORMS[p]}.join(" ")
        rega = @regalloc[alg]
        ctest = %Q[#{@ctest} #{bm.path} -I -i #{prepasses} ] + 
                    %Q[-"{#{rega} #{bm.args}}" #{postpasses}]
        ##puts ctest
        `#{ctest}`

        #extract runtime stats
        statfiles = File.join(@tmpdir, "**", "*.stats")
        Dir.glob(statfiles).each do |f|
          @outfile.puts File.read(f)
        end
      end
      @outfile.puts BM_SEP
    end
  end
end

#
# RUN SCRIPT
#
if __FILE__ == $0 then
  #parse options with defaults
  options = OpenStruct.new
  options.logfile = nil
  options.algorithm = :chow
  options.bmfiles = [] 
  options.print = false
  options.ctest_args = ""
  options.output = $stdout


  #
  # ARGUMENT DESCRIPTION
  #
  opts = 
  OptionParser.new do |opt|
    opt.banner = 
      "usage: benchmark [options] -f<file>\n"
      "Run benchmarks tests for chow allocator" 
    opt.separator ""
    opt.on("-f","--file T1,T2,T3", Array, "Use tests from file(s)") {|t|
      options.bmfiles = t
    }
    opt.on("-l=LOG_FILE", "--logfile=LOG_FILE",
        "Set the log file for the tests") {|f|
      options.logfile = f
    }
    opt.on("-a ALG", "--algorithm ALG", [:chow, :ra],
        "Algorithm to use (chow=default, ra)") {|a|
      options.algorithm = a
    }
    opt.on("-p", "--print-only",
        "Print the benchmarks to run and exit") {
      options.print = true
    }
    opt.on("-g", "--progress",
        "Print progress bar to stdout") {
      options.progress = true
    }
    opt.on("-Q", "--quiet-ctest",
        "Run ctest in quiet mode") {
      options.ctest_args += "-Q"
    }
    opt.on("-o", "--output OUTPUT_FILE",
        "Set the output file for the benchmarks") {|f|
      if File.exist?(f) then
        puts "output file: #{f} already exists. I will not overwrite it"
        exit RegressionTest::EXIT_FAILURE
      else
        options.output = File.open(f, "w")
      end
    }
  end
  begin
    opts.parse!
  rescue => e
    puts "ERROR: #{e}"
    puts opts.help
    exit
  end

  #
  # CHECK FOR REQUIRED ARGUMENTS
  #
  #check for required arguments
  if options.bmfiles.empty? then
    $stderr.puts "ERROR:  must have -f flag"
    $stderr.puts opts.help
    exit
  end

  #
  # PARSE THE BENCHMARK DESCRIPTION FILES
  #
  tests = []
  options.bmfiles.each do |f|
    tests.concat(RegressionTest::TestDSL.load(f))
  end
  if options.print then
    tests.each do |t|
      puts "%s %s %s" % [options.algorithm,t.args,t.path]
    end
    exit RegressionTest::EXIT_SUCCESS
  end


  #
  # RUN THE BENCHMARKS
  #
  begin
  tmpdir = File.join(Dir::tmpdir,"chowbench_#{Process.pid}_#{rand(1024)}")
  bm_runner = 
    ChowBenchmark::Runner.new(tmpdir, options.output, options.ctest_args)
  if options.progress then
    n = 0
    puts "running %s benchmarks" % tests.size
  end
  tests.each do |t|
    if options.progress then
      print "#"; $stdout.flush
      n += 1
      puts " (#{n}/#{tests.size})" if n % 50  == 0 || n == tests.size
    end
    FileUtils.mkdir(tmpdir)
    bm_runner.run(options.algorithm, t)
    FileUtils.rm_rf(tmpdir)
  end
  rescue => e
    $stderr.puts "!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    $stderr.puts "error during chow benchmark run"
    $stderr.puts e
    $stderr.puts "!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  ensure
    FileUtils.rm_rf(tmpdir)
  end
end


