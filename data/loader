#!/bin/env ruby

require 'optparse'
require 'ostruct'
require 'rubygems'
require_gem 'activerecord'

module ChowBenchmark
  #
  # Database interaction
  #
  class Loader
    def initialize(db)
      ActiveRecord::Base.establish_connection(
        :adapter  => "sqlite3",
        :database => db
      )
    end

    #
    # ActiveRecord Database classes
    #
    class Benchmark < ActiveRecord::Base
      has_many :timings
      belongs_to :allocation_detail
      belongs_to :optimization

      validates_presence_of :allocation_detail_id, :optimization_id
    end
    class Optimization < ActiveRecord::Base
      has_many :benchmarks
    end
    class AllocationDetail < ActiveRecord::Base
      has_many :benchmarks
    end
    class Timing < ActiveRecord::Base
      belongs_to :benchmark
    end
  end

  #
  # Wrapper for parsing
  #
  class OutputParser
    def self.parse(inputfile, sep="%%")
      results = []
      inputfile.read.split(/^#{sep}/).each do |sec|
        next if sec ==  "\n" || sec == ""
        results << BenchmarkResult.new(sec)
      end
      results
    end
  end

  #
  # Class representing the results of running a benchmark
  #
  class BenchmarkResult
    attr_reader :program, :family, :algorithm, :param_string
    attr_reader :param_details, :pre_pass, :post_pass, :timings

    #make constants from a list of strings
    def self.result_sections(*args)    
      args.flatten.each_with_index do | const, i |
        class_eval %(#{const} = #{i})
      end
    end

    result_sections %w(PATH ALG ARGS PRE_PASS POST_PASS TIMINGS)
    def initialize(str, sep="%")

      sections =  str.split(sep).map {|s|  s.lstrip.rstrip}
      @program = File.basename(sections[PATH])
      @family = File.basename(File.dirname(sections[PATH]))
      @algorithm = sections[ALG]

      #parse args based on whether details are present (for chow)
      if sections[ALG] == "chow" then
        params = sections[ARGS].split("\n")
        @param_string  = params.shift
        @param_details = YAML::load(params.join("\n"))
      else
        @param_string  = sections[ARGS]
        num_reg =
          @param_string[@param_string.index("-r")+2..-1].split.first.to_i
        @param_details = {"r" => num_reg}
      end

      @pre_pass = sections[PRE_PASS]
      @post_pass = sections[POST_PASS]

      @timings = parse_timings(sections[TIMINGS])
    end

    class Timing
      attr_reader :function
      attr_reader :calls 
      attr_reader :insns 
      def initialize(f, calls, insns)
        @function = f
        @calls = calls
        @insns = insns
      end

      def to_s
        "%s %s %s" % [@function, @calls, @insns]
      end
    end
    def parse_timings(timings_str)
      functions = timings_str.split("\n")[3..-1]
      functions.map do |fun|
        f,calls,insns = fun.split
        f.gsub!(/_$/,"")
        Timing.new(f,calls,insns)
      end
    end

    def to_s
      str = <<-end.margin
        |#{@family}: #{@program}
        |#{@algorithm} #{@param_string}
        |PRE:  #{@pre_pass}
        |POST: #{@post_pass}
        |FUNCTIONS:
        |
      end
      @timings.each {|t| str << "   " << t.to_s << "\n"}
      str
    end
  end
end

#
# Add this to String to make here docs more readable
#
class String
  #from The Ruby Way by Hal Fulton
  def margin
    arr = self.split("\n")
    arr.map! {|x| x.sub!(/^\s*\|/,"")}
    str = arr.join("\n")
    self.replace(str)
  end
end

#
# RUN SCRIPT
#
if __FILE__ == $0 then
#parse options with defaults
options = OpenStruct.new
options.output = $stdout

#
# ARGUMENT DESCRIPTION
#
opts =
OptionParser.new do |opt|
  opt.banner =
    "usage: benchmark [options] -f<file>\n"
    "Run benchmarks tests for chow allocator"
  opt.separator ""
  opt.on("-f","--file BM_FILE", "Load results from file") {|f|
    options.bmfile = f
    if !File.exist?(f) then
      puts "input file: #{f} does not exist"
      exit 2
    end
  }
  opt.on("-p", "--print-only",
      "Print the benchmarks to load and exit") {
    options.print = true
  }
  opt.on("-o", "--output OUTPUT_FILE",
      "Set the output file for the benchmarks") {|f|
    if File.exist?(f) then
      puts "output file: #{f} already exists. I will not overwrite it"
      exit 2
    else
      options.output = File.open(f, "w")
    end
  }
  opt.on("-d", "--database DATABASE_FILE",
        "Perform actions on this DB file") {|f|
    if !File.exist?(f) then
      puts "database file: #{f} does not exist"
      exit 2
    end
    options.database = f
  }
end
begin
  opts.parse!
rescue => e
  puts "ERROR: #{e}"
  puts e
  puts opts.help
  exit 2
end

#
# CHECK FOR REQUIRED ARGUMENTS
#
#check for required arguments
if options.bmfile.nil? then
  $stderr.puts "ERROR:  must have -f flag"
  $stderr.puts opts.help
  exit 2
end
if !options.print && !options.database then
  $stderr.puts "ERROR:  must specify either -p or -d flag"
  $stderr.puts opts.help
  exit 2
end

#
# LOAD BENCHMARK FILE
#
File.open(options.bmfile) do |f|
  puts "parsing file"
  results = ChowBenchmark::OutputParser.parse(f)
  if options.print then 
    results.each do |r| 
      puts "-----------------------------------------"
      puts r.to_s
      puts "-----------------------------------------"
    end
  else
    DB = ChowBenchmark::Loader
    puts "upload to database"
    DB.new(options.database)

    begin
    DB::Benchmark.transaction do
      results.each do |r|
        #
        # Create Benchmark
        #
        bm = DB::Benchmark.new({
          :program => r.program,
          :family  => r.family
        })

        #
        # Find optimization record
        #
        optimization = 
        DB::Optimization.find_by_pre_passes_and_post_passes(r.pre_pass,
                                                            r.post_pass)
        if optimization.nil? then
          optimization = DB::Optimization.create!({
            :pre_passes => r.pre_pass, 
            :post_passes => r.post_pass
          })
        end
        bm.optimization = optimization
        ##bm.optimization_id = optimization.id

        #
        # Find allocation_details record
        #
        detail = nil
        if r.algorithm == "chow" then
          conditions = 
          ["algorithm = ? AND num_registers = ? AND bb_size = ? AND "+
           "partitioned = ? AND load_store_movement = ? AND "+
           "enhanced_load_store_movement = ?",
           r.algorithm, r.param_details["r"], r.param_details["b"], 
           r.param_details["p"], r.param_details["m"], 
           r.param_details["e"]]

          detail = 
            DB::AllocationDetail.find(:first, :conditions => conditions)
          if detail.nil? then
            detail = DB::AllocationDetail.create!({
              :algorithm => r.algorithm,
              :param_string => r.param_string,
              :num_registers => r.param_details["r"],
              :bb_size => r.param_details["b"],
              :partitioned => r.param_details["p"],
              :load_store_movement => r.param_details["m"],
              :enhanced_load_store_movement => r.param_details["e"]
            })
          end
        # ra details
        else
          detail = DB::AllocationDetail.find_by_algorithm_and_param_string(
            r.algorithm, r.param_string
          )
          if detail.nil? then
            detail = 
            DB::AllocationDetail.create!({
              :algorithm => r.algorithm,
              :param_string => r.param_string,
              :num_registers => r.param_details["r"]
            })
          end
        end
        bm.allocation_detail = detail 
        ##bm.allocation_detail_id = detail.id

        #
        # Create BenchmarkData
        #
        r.timings.each do |timing|
          bm.timings <<
          DB::Timing.new({
            :function_name => timing.function,
            :instruction_count => timing.insns,
            :calls => timing.calls,
          })
        end

        #
        # Finally, save the benchmark to the database
        #
        ##puts bm.inspect
        bm.save!
      end
    end
    rescue => e
      puts "ERROR: #{e}"
      puts e.backtrace
      exit 2
    end
    puts "upload complete"
  end
end

end
